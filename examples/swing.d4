::scale ticks;

:swing_two (frac speed -- beat-age beat-number)
    2* 2 dmod drop 2/
    dup rot -
    dup 0> if
      nip 1
    else
      drop 0
    then
;

:swing_three (frac1 frac2 speed -- beat-age beat-number)
    3* 3 dmod drop 3/
    dup rot -
    dup 0> if
      nip nip 2
    else
      drop dup rot -
      dup 0> from
        nip 0,
        drop 1
      choose
    then
;

32      ( bars before everything loops )
2*      ( two triplets per bar i.e. 6/8 )

1080bpm ticks nip (-- triplet-count)

3* 0.33 0.58 108bpm swing_three (-- triplet-count beat-age beat-number-within-triplet)
rot +                           (-- beat-age total-beat-number)

12 8 * ( length of following sequence )
mod from
     B, A, G, B, C, D, E, D, C, B, A, B,
     C, B, C, A, D, C, B, C, A, G, D, C,
     B, A, G, B, C, D, E, D, C, B, A, B,
     C, B, C, A, D, C, B, C, A, G, B, D,
     G', F#, G', G', F#, G', E, F#, G', A', F#, D,
     D, C, B, C, D, E, A', A', G', F#, E, D,
     B, A, G, B, C, D, E, D, C, B, A, B,
     C, B, C, A, D, C, B, C, A, G, G, D,
choose                         (-- beat-age freq)
nip T*sin.
